#include <Windows.h>
#include "../NaResolver.h"

// Generated by NaDumper
namespace UnityEngine { class Application; }
namespace UnityEngine { class Debug; }

namespace System
{
	// Type: Class
	class Object
	{
	public:
		CLASS(mscorlib, System, Object);
	};
}

namespace UnityEngine
{
	using namespace Template;

	// Type: Class
	class Object : public System::Object
	{
	public:
		CLASS(mscorlib, System, Object);

		STATIC_FIELD(int, test);
	};
	// Type: Class
	class Application : public System::Object
	{
	public:
		CLASS(mscorlib, System, Application);

		METHOD("System.Boolean", get_isMobilePlatform);
		static bool get_isMobilePlatform()
		{
			return MethodInvoker<bool>(__get_isMobilePlatform.GetMethodAddress())();
		}
	};
	// Type: Class
	class Debug : public System::Object
	{
	public:
		CLASS(mscorlib, System, Debug);
	};
}

using namespace UnityEngine;

HINSTANCE module = NULL;

void Example()
{
	AllocConsole();
	freopen_s((FILE**)stdout, "CONOUT$", "w", stdout);

	if (!naResolverInstance.Setup())
		printf("Failed to setup NaResolver!\n");

	//printf("Unity version: %s\n", Application::get_unityVersion().c_str());	// some unity versions don't have this method
	//printf("Game version: %s\n", Application::get_version().c_str());			// some unity versions don't have this method
	//printf("Is MobilePlatform: %d\n", Application::get_isMobilePlatform());
	//printf("%p", UnityEngine::Application::__get_isMobilePlatform.GetMethodAddress());
	//printf("%p", METHOD_ADDRESS_WITH_CLASS(UnityEngine::Application, "System.Boolean", "get_isMobilePlatform"));

	FreeConsole();
	FreeLibraryAndExitThread(module, 0);
}


int WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
	if (fdwReason == DLL_PROCESS_ATTACH)
	{
		DisableThreadLibraryCalls(hinstDLL);
		module = hinstDLL;
		CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)Example, NULL, NULL, NULL);
	}
	return TRUE; // Successful DLL_PROCESS_ATTACH.
}
