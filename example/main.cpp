#include <Windows.h>
#include "../NaResolver.h"

using namespace NaOrganization::MidTerm;

// Generated by NaDumper
namespace UnityEngine { class Application; }
namespace UnityEngine { class Debug; }

namespace System
{
	// Type: Class
	class Object
	{
	public:
		CLASS("mscorlib", "System", "Object");



		std::string ToString()
		{
			static auto invoker = NaMethodInvoker<void*, Object*>(METHOD_ADDRESS("System.String", "ToString", ));
			return (VmGeneralType::String)invoker.Invoke(this);
		}
	};
}

namespace UnityEngine
{
	// Type: Class
	class Object : public System::Object
	{
	public:
		CLASS("UnityEngine.CoreModule", "UnityEngine", "Object");



		std::string get_name()
		{
			static auto invoker = NaMethodInvoker<void*, Object*>(METHOD_ADDRESS("System.String", "get_name", ));
			return (VmGeneralType::String)invoker.Invoke(this);
		}
		void set_name(VmGeneralType::String value)
		{
			static auto invoker = NaMethodInvoker<void, Object*, void*>(METHOD_ADDRESS("System.Void", "set_name", "System.String"));
			return invoker.Invoke(this, value);
		}
		static void Destroy(UnityEngine::Object* obj)
		{
			static auto invoker = NaMethodInvoker<void, UnityEngine::Object*>(METHOD_ADDRESS("System.Void", "Destroy", "UnityEngine.Object"));
			return invoker.Invoke(obj);
		}
	};
	// Type: Class
	class Application : public System::Object
	{
	public:
		CLASS("UnityEngine.CoreModule", "UnityEngine", "Application");



		static std::string get_unityVersion()
		{
			static auto invoker = NaMethodInvoker<void*>(METHOD_ADDRESS("System.String", "get_unityVersion", ));
			return (VmGeneralType::String)invoker.Invoke();
		}
		static std::string get_version()
		{
			static auto invoker = NaMethodInvoker<void*>(METHOD_ADDRESS("System.String", "get_version", ));
			return (VmGeneralType::String)invoker.Invoke();
		}
		static bool get_isMobilePlatform()
		{
			static auto invoker = NaMethodInvoker<bool>(METHOD_ADDRESS("System.Boolean", "get_isMobilePlatform", ));
			return invoker.Invoke();
		}
	};
	// Type: Class
	class Debug : public System::Object
	{
	public:
		CLASS("UnityEngine.CoreModule", "UnityEngine", "Debug");



		static void LogError(void* message)
		{
			static auto invoker = NaMethodInvoker<void, void*>(METHOD_ADDRESS("System.Void", "LogError", "System.Object"));
			return invoker.Invoke(message);
		}
		static void LogWarning(void* message)
		{
			static auto invoker = NaMethodInvoker<void, void*>(METHOD_ADDRESS("System.Void", "LogWarning", "System.Object"));
			return invoker.Invoke(message);
		}
	};
}

using namespace UnityEngine;

HINSTANCE module = NULL;

void Example()
{
	AllocConsole();
	freopen_s((FILE**)stdout, "CONOUT$", "w", stdout);

	try
	{
		if (!UnityResolver.Setup())
			printf("Failed to setup I2Hrame!\n");
	}
	catch (const NaResolver::Exception& e)
	{
		printf("[NaResolver] %s\n", e.message.c_str());
	}

	//printf("Unity version: %s\n", Application::get_unityVersion().c_str());	// some unity versions don't have this method
	//printf("Game version: %s\n", Application::get_version().c_str());			// some unity versions don't have this method
	printf("Is MobilePlatform: %d\n", Application::get_isMobilePlatform());

	FreeConsole();
	FreeLibraryAndExitThread(module, 0);
}


int WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
	if (fdwReason == DLL_PROCESS_ATTACH)
	{
		DisableThreadLibraryCalls(hinstDLL);
		module = hinstDLL;
		CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)Example, NULL, NULL, NULL);
	}
	return TRUE; // Successful DLL_PROCESS_ATTACH.
}
